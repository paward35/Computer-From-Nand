class Player {
   field Array location;
   field int x, y, key, direction; // screen location of the top-left corner of this square
   field int size; // length of this square, in pixels
   constructor Player new(int ax, int ay, int asize) {
      let x = ax;
      let y = ay;
      let size = asize;
      let direction = 0;
      do draw();
      let location = Array.new(3);
      return this;
   }

   method int getY() {
      return y;
   }

   method int getX() {
      return x;
   }

   method int getSize() {
      return size;
   }




   /** Disposes this square. */
   method void dispose() {
      do Memory.deAlloc(this);
      return;
   }

   /** Draws this square in its current (x,y) location */
   method void draw() {
      // Draws the square using the color black
      do Screen.setColor(true);
      do Screen.drawRectangle(x, y, x + size, y + size);
      return;
   }

   /** Erases this square. */
   method void erase() {
      // Draws the square using the color white (background color)
      do Screen.setColor(false);
      do Screen.drawRectangle(x, y, x + size, y + size);
      return;
   }

    /** Increments the square size by 2 pixels (if possible). */
   method void incSize() {
      if (((y + size) < 254) & ((x + size) < 510)) {
         do erase();
         let size = size + 2;
         do draw();
      }
      return;
   }

   /** Decrements the square size by 2 pixels (if possible). */
   method void decSize() {
      if (size > 2) {
         do erase();
         let size = size - 2;
         do draw();
      }
      return;
   }

   /** Moves this square up by 2 pixels (if possible). */
   method void moveUp() {
      if (y > 1) {
         // Erases the bottom two rows of this square in its current location
         do Screen.setColor(false);
         do Screen.drawRectangle(x, (y + size) - 1, x + size, y + size);
         let y = y - 2;
         // Draws the top two rows of this square in its new location
         do Screen.setColor(true);
         do Screen.drawRectangle(x, y, x + size, y + 1);
      }
      return;
   }

   /** Moves the square down by 2 pixels (if possible). */
   method void moveDown() {
      if ((y + size) < 254) {
         do Screen.setColor(false);
         do Screen.drawRectangle(x, y, x + size, y + 1);
         let y = y + 2;
         do Screen.setColor(true);
         do Screen.drawRectangle(x, (y + size) - 1, x + size, y + size);
      }
      return;
   }

   /** Moves the square left by 2 pixels (if possible). */
   method void moveLeft() {
      if (x > 1) {
         do Screen.setColor(false);
         do Screen.drawRectangle((x + size) - 1, y, x + size, y + size);
         let x = x - 2;
         do Screen.setColor(true);
         do Screen.drawRectangle(x, y, x + 1, y + size);
      }
      return;
   }

   method void movePlayer(int key) {
      if (key = 131) { let direction = 1; }   // up arrow
      if (key = 133) { let direction = 2; }   // down arrow
      if (key = 130) { let direction = 3; }   // left arrow
      if (key = 132) { let direction = 4; }   // right arrow
      if (direction = 1) { do moveUp(); }
      if (direction = 2) { do moveDown(); }
      if (direction = 3) { do moveLeft(); }
      if (direction = 4) { do moveRight(); }
      do Sys.wait(5);  // delays the next movement
      
      let location[0] = x;
      let location[1] = y;
      let location[2] = size;
      return;
   }

   /** Moves the square right by 2 pixels (if possible). */
   method void moveRight() {
      if ((x + size) < 510) {
         do Screen.setColor(false);
         do Screen.drawRectangle(x, y, x + 1, y + size);
         let x = x + 2;
         do Screen.setColor(true);
         do Screen.drawRectangle((x + size) - 1, y, x + size, y + size);
      }
      return;
   }
}
