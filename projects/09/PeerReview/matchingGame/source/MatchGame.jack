class MatchGame {
    field boolean exit;

    field Array cards;
    field int numCards;
    field int currentIndex;
    field Array cardAnimations;
    field int numUp;
    field int lastUpIndex;
    field Card selectionCard;
    field Random random;

    constructor MatchGame new() {
        var int i;
        var int cardValue;
        var int x;
        var Array tempValues;

        let exit = false;
        let numCards = 10;
        let cards = Array.new(numCards);
        let currentIndex = 0;
        let numUp = 0;
        let cardAnimations = Array.new(2);
        let lastUpIndex = -1;
        let random = Random.new(1);

        let tempValues = Array.new(numCards);
        let i = 0;
        while (i < numCards) {
            let cardValue = i + 1;
            while (cardValue > 5) {
                let cardValue = cardValue - 5;
            }
            let tempValues[i] = cardValue;
            let i = i + 1;
        }
        // Shuffle       
        let i = numCards - 1;
        while (i > 0) {
            let cardValue = random.nextIntInRange(0, i + 1);
            let x = tempValues[i];
            let tempValues[i] = tempValues[cardValue];
            let tempValues[cardValue] = x;
            let i = i - 1;
        }

        let i = 0;
        while (i < numCards) {
            let cardValue = tempValues[i];
            let x = i;
            while ((x > 5) | (x = 5)) {
                let x = x - 5;
            }
            let cards[i] = Card.new(118 + (x * 55), 53 + ((i / 5) * 75), 35, 55, cardValue);

            let i = i + 1;
        }
        do tempValues.dispose();


        let i = 0;
        while (i < 2) {
            let cardAnimations[i] = CardAnimation.new();
            let i = i + 1;
        }

        let selectionCard = Card.new(0, 0, 35 + 10, 55 + 10, 0);
        do selectionCard.setIsDown(false);
        do updateSelectionCardOffset();

        do render();
        return this;
    }

    method void dispose() {
        var int i;
        var Card card;
        var CardAnimation animation;
        let i = 0;
        while (i < numCards) {
            let card = cards[i];
            do card.dispose();
            let i = i + 1;
        }
        do cards.dispose();
        let i = 0;
        while (i < 2) {
            let animation = cardAnimations[i];
            do animation.dispose();
            let i = i + 1;
        }
        do cardAnimations.dispose();
        do random.dispose();
        do selectionCard.dispose();
        do Memory.deAlloc(this);
        return;
    }

    method void updateSelectionCardOffset() {
        var Card card;
        if (~(currentIndex < 0)) {
            let card = cards[currentIndex];
            do selectionCard.setX(card.getX() - 5);
            do selectionCard.setY(card.getY() - 5);
            do selectionCard.render();
        }
        return;
    }

    method void render() {
        var int i;
        var Card card;
        do Screen.clearScreen();
        do Screen.setColor(true);
        let i = 0;
        while (i < numCards) {
            let card = cards[i];
            do card.render();
            let i = i + 1;
        }
        if (~(currentIndex < 0)) {
            do selectionCard.render();
        }
        return;
    }

    method int getNextAvailableCard() {
        var int startingIndex;
        var int i;
        var Card card;
        var int foundIndex;
        let foundIndex = -1;

        let startingIndex = currentIndex + 1;
        if ((startingIndex > numCards) | (startingIndex = numCards)) {
            let startingIndex = 0;
        }

        let i = startingIndex;
        while (i < numCards) {
            if (~(i = currentIndex)) {
                let card = cards[i];
                if ((card.getIsInPlay()) & (foundIndex < 0)) {
                    let foundIndex = i;
                }
                let i = i + 1;
                if ((i > numCards) | (i = numCards)) {
                    let i = 0;
                }
            } else {
                let i = numCards + 1;
            }
        }

        return foundIndex;
    }

    method void updateAnimations() {
        var boolean wasAnimating;
        var int i;
        var Card card;
        var CardAnimation animation;
        var int cardValue1;
        var int cardValue2;

        let wasAnimating = isAnimating();

        if (wasAnimating) {
            let i = 0;
            while (i < 2) {
                let animation = cardAnimations[i];
                do animation.update(cards);
                let i = i + 1;
            }
        }

        if ((~isAnimating()) & wasAnimating) {
            if (numUp = 2) {
                let card = cards[currentIndex];
                let cardValue1 = card.getValue();
                let card = cards[lastUpIndex];
                let cardValue2 = card.getValue();

                if (cardValue1 = cardValue2) {
                    let card = cards[currentIndex];
                    do card.setIsInPlay(false);
                    let card = cards[lastUpIndex];
                    do card.setIsInPlay(false);

                    // Move the selection to the next available card
                    let currentIndex = getNextAvailableCard();
                    do updateSelectionCardOffset();
                    if (currentIndex < 0) {
                        let exit = true;
                    }
                } else {
                    let card = cards[currentIndex];
                    let animation = cardAnimations[1];
                    do animation.startNew(0, card.getX(), currentIndex);
                    let card = cards[lastUpIndex];
                    let animation = cardAnimations[0];
                    do animation.startNew(0, card.getX(), lastUpIndex);
                }

                let numUp = 0;
                let lastUpIndex = -1;
            }
        }

        return;
    }

    method void updateAndRender() {
        do updateAnimations();
        do render();
        return;
    }

    method boolean isAnimating() {
        var int i;
        var CardAnimation animation;
        var boolean animating;
        let animating = false;
        let i = 0;
        while (i < 2) {
            let animation = cardAnimations[i];
            if (animation.getIsAnimating()) {
                let animating = true;
            }
            let i = i + 1;
        }
        return animating;
    }

    method void run() {
        var char key;
        var int newWidth;
        var boolean isDown;
        var int cardValue;
        var Card card;
        var CardAnimation animation;

        while (~exit) {
            // waits for a key to be pressed.
            while ((key = 0) & (~exit)) {
                let key = Keyboard.keyPressed();
                do updateAndRender();
                do Sys.wait(50);
            }

            if ((~isAnimating()) & (~exit)) {
                if (key = 130) { 
                    if (~(lastUpIndex < 0)) {
                        if (~(lastUpIndex = currentIndex)) {
                            let card = cards[currentIndex];
                            let animation = cardAnimations[1];
                            do animation.startNew(0, card.getX(), currentIndex);
                            let numUp = 2;
                        }
                    } else {
                        let lastUpIndex = currentIndex;
                        let card = cards[currentIndex];
                        let animation = cardAnimations[0];
                        do animation.startNew(0, card.getX(), currentIndex);
                        let numUp = 1;
                    }
                } else {
                    if (key = 132) { 
                        let currentIndex = getNextAvailableCard();
                        do updateSelectionCardOffset();
                        if (currentIndex < 0) {
                            let exit = true;
                        }
                    }
                }
            }
            if (key = 140) { let exit = true; }

            // Waits for the key to be released.
            while ((~(key = 0)) & (~exit)) {
                let key = Keyboard.keyPressed();
                do updateAndRender();
                do Sys.wait(50);
            }
        }

	    if (exit) {
            do Output.moveCursor(18,27);
	        do Output.printString("Game Over");
	    }
            
        return;
    }
}