function SIR.new 0
push constant 5
call Memory.alloc 1
pop pointer 0
push argument 0
pop this 0
push argument 1
pop this 1
push argument 2
pop this 2
push argument 3
pop this 3
push argument 4
pop this 4
push pointer 0
return
function SIR.gettrans 0
push argument 0
pop pointer 0
push this 0
return
function SIR.getrecov 0
push argument 0
pop pointer 0
push this 1
return
function SIR.getS 0
push argument 0
pop pointer 0
push this 2
return
function SIR.getI 0
push argument 0
pop pointer 0
push this 3
return
function SIR.getR 0
push argument 0
pop pointer 0
push this 4
return
function SIR.timestep 7
push argument 0
pop pointer 0
push this 2
pop local 0
push this 3
pop local 1
push this 4
pop local 2
push this 2
push this 3
add
push this 4
add
pop local 6
push this 0
push this 3
call Math.multiply 2
push this 2
call Math.multiply 2
push local 6
call Math.divide 2
neg
pop local 3
push this 0
push this 3
call Math.multiply 2
push this 2
call Math.multiply 2
push local 6
call Math.divide 2
push this 1
push this 3
call Math.multiply 2
sub
pop local 4
push this 1
push this 3
call Math.multiply 2
pop local 5
push this 2
push local 3
add
pop this 2
push this 3
push local 4
add
pop this 3
push this 4
push local 5
add
pop this 4
push constant 10
push argument 1
push constant 50
call Math.multiply 2
add
push constant 245
push constant 2
push local 0
call Math.multiply 2
sub
push constant 10
push argument 1
push constant 1
add
push constant 50
call Math.multiply 2
add
push constant 245
push constant 2
push this 2
call Math.multiply 2
sub
call Screen.drawLine 4
pop temp 0
push constant 10
push argument 1
push constant 50
call Math.multiply 2
add
push constant 245
push constant 2
push local 1
call Math.multiply 2
sub
push constant 10
push argument 1
push constant 1
add
push constant 50
call Math.multiply 2
add
push constant 245
push constant 2
push this 3
call Math.multiply 2
sub
call Screen.drawLine 4
pop temp 0
push constant 10
push argument 1
push constant 50
call Math.multiply 2
add
push constant 245
push constant 2
push local 2
call Math.multiply 2
sub
push constant 10
push argument 1
push constant 1
add
push constant 50
call Math.multiply 2
add
push constant 245
push constant 2
push this 4
call Math.multiply 2
sub
call Screen.drawLine 4
pop temp 0
push this 0
push this 1
push this 2
push this 3
push this 4
call SIR.new 5
return
