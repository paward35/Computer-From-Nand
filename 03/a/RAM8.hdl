// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/03/a/RAM8.hdl

/**
 * Memory of 8 registers, each 16 bit-wide. Out holds the value
 * stored at the memory location specified by address. If load==1, then 
 * the in value is loaded into the memory location specified by address 
 * (the loaded value will be emitted to out from the next time step onward).
 */

CHIP RAM8 {
    IN in[16], load, address[3];
    OUT out[16];

    PARTS:
    // Put your code here:
    Not(in=address[0], out=isZero1);
    Not(in=address[1], out=isZero2);
    Not(in=address[2], out=isZero3);
    And(a=isZero1, b=isZero2, out=isZero4);
    And(a=isZero4, b=isZero3, out=isZero);
    And(a=isZero, b=load, out=loadZero);
    Register(in=in, load=loadZero, out=outZero);
    
    Not(in=address[1], out=isOne2);
    Not(in=address[2], out=isOne3);
    And(a=address[0], b=isOne2, out=isOne4);
    And(a=isOne4, b=isOne3, out=isOne);
    And(a=isOne, b=load, out=loadOne);
    Register(in=in, load=loadOne, out=outOne);
    
    Not(in=address[0], out=isTwo1);
    Not(in=address[2], out=isTwo3);
    And(a=isTwo1, b=address[1], out=isTwo4);
    And(a=isTwo4, b=isTwo3, out=isTwo);
    And(a=isTwo, b=load, out=loadTwo);
    Register(in=in, load=loadTwo, out=outTwo);
    
    Not(in=address[2], out=isThree3);
    And(a=address[1], b=address[0], out=isThree4);
    And(a=isThree4, b=isThree3, out=isThree);
    And(a=isThree, b=load, out=loadThree);
    Register(in=in, load=loadThree, out=outThree);
    
    Not(in=address[0], out=isFour1);
    Not(in=address[1], out=isFour2);
    And(a=isFour1, b=isFour2, out=isFour4);
    And(a=isZero4, b=address[2], out=isFour);
    And(a=isFour, b=load, out=loadFour);
    Register(in=in, load=loadFour, out=outFour);
    
    Not(in=address[1], out=isFive1);
    And(a=isFive1, b=address[0], out=isFive4);
    And(a=isFive4, b=address[2], out=isFive);
    And(a=isFive, b=load, out=loadFive);
    Register(in=in, load=loadFive, out=outFive);
    
    Not(in=address[0], out=isSix2);
    And(a=address[1], b=isSix2, out=isSix4);
    And(a=address[2], b=isSix4, out=isSix);
    And(a=isSix, b=load, out=loadSix);
    Register(in=in, load=loadSix, out=outSix);
    
    And(a=address[0], b=address[1], out=isSeven4);
    And(a=isSeven4, b=address[2], out=isSeven);
    And(a=isSeven, b=load, out=loadSeven);
    Register(in=in, load=loadSeven, out=outSeven);
    
    Mux16(a=outZero , b=outOne, sel=address[0], out=outOneZero);
    Mux16(a=outTwo, b=outThree, sel=address[0], out=outTwoThree);
    Mux16(a=outFour, b=outFive, sel=address[0], out=outFourFive);
    Mux16(a=outSix, b=outSeven, sel=address[0], out=outSixSeven);
    
    Mux16(a=outOneZero, b=outTwoThree, sel=address[1], out=outLower);
    Mux16(a=outFourFive, b=outSixSeven, sel=address[1], out=outUpper);
    
    Mux16(a=outLower, b=outUpper, sel=address[2], out=out);
    

  
}